{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","temp","humidity","icon","maxTemp","minTemp","cond","cityName","handleClick","_callee","e","city","api","api_2","rtr","rtr_2","regenerator_default","a","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","console","log","_this","setState","Math","round","main","weather","temp_max","temp_min","description","name","stop","react_default","createElement","className","id","onSubmit","this","type","placeholder","class","src","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c01dc024.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport './App.css';\n\nclass App extends Component{\n  state={\n   temp:\"\",\n    humidity:\"\",\n    icon:\"\",\n    maxTemp:\"\",\n    minTemp:\"\",\n    cond:\"\",\n    cityName:\"\"\n\n  }\n  handleClick = async(e) =>{\n    e.preventDefault();\n    const city = e.target.elements.city.value;\n    const api = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&units=imperial&APPID=3b9d0a98685365360dd3aa411f92eea5`);\n    const api_2 = await fetch(`https://api.openweathermap.org/data/2.5/forecast?q=${city}&units=imperial&APPID=3b9d0a98685365360dd3aa411f92eea5`);\n    const rtr = await api.json();\n    const rtr_2 = await api_2.json();\n    console.log(rtr);\n    console.log(rtr_2);\n    this.setState({\n      temp:(Math.round(rtr.main.temp)),\n      humidity:rtr.main.humidity,\n      icon:rtr.weather[0].icon,\n      maxTemp:(Math.round(rtr.main.temp_max)),\n      minTemp:(Math.round(rtr.main.temp_min)),\n      cond:rtr.weather[0].description,\n      cityName:rtr.name\n    })\n  }\n\n  render() {\n    return(\n      <div className=\"container\">\n          <center>\n              <div className=\"card\" id=\"card1\">\n                <h1 className=\"text-center\">Check Your Weather</h1>\n              <div className=\"row\">\n                <form onSubmit={ this.handleClick }>\n                  <div className=\"row\">\n                    <div className=\"col-md-6 offset-sm-3\">\n                      <input type=\"text\" placeholder=\"Enter City Name\" name=\"city\" className=\"from-control\"></input>\n                    </div>\n                  </div>\n                  <div className=\"row\">\n                    <div className=\"col-md-6 offset-sm-3\">\n                      <button className=\"btn btn-primary btn-lg\">Get Weather</button>\n                    </div>\n                  </div>\n                </form>\n              </div>\n              <div>\n                {this.state.temp!==\"\"?<h1>Current:{this.state.temp}&deg;F</h1>:''}\n              </div>\n              <div class=\"row\">\n                {this.state.cityName!==\"\"?<h1>{this.state.cityName}</h1>:''}\n\n                {this.state.icon!==\"\"?<img src={`http://openweathermap.org/img/w/${this.state.icon}.png`}/>:''}\n\n                {this.state.cond!==\"\"?<h5 className=\"text-uppercase\">{this.state.cond}</h5>:''}\n              </div>\n              <div class=\"row\">\n                <div class=\"col-xs-12 col-md-6\">\n                {this.state.maxTemp!==\"\"?<h1>High:{this.state.maxTemp}&deg;F</h1>:''}\n                </div>\n                <div class=\"col-xs-12 col-md-6\">\n                {this.state.minTemp!==\"\"?<h1>Low:{this.state.minTemp}&deg;F</h1>:''}\n                </div>\n                \n                {this.state.humidity!==\"\"?<h1>Humidity:{this.state.humidity}%</h1>:''}\n                \n              </div>\n            </div> \n          </center>\n      </div>\n    )\n  }\n\n}\n\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport '../node_modules/bootstrap/dist/js/bootstrap.min.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}